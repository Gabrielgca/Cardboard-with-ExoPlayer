apply plugin: 'com.android.application'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"
    lintOptions {
        abortOnError false
    }
    defaultConfig {
        applicationId "com.google.cardboard.hellocardboard"
        minSdkVersion 18
        targetSdkVersion 30
        multiDexEnabled true
        versionCode 1
        versionName "1.8.0"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
        externalNativeBuild.cmake {
            arguments "-DANDROID_STL=c++_shared"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild.cmake {
        path "CMakeLists.txt"
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    // Android Mobile Vision
    implementation 'com.google.android.gms:play-services-vision:15.0.2'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'com.google.android.exoplayer:exoplayer:2.14.1'
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'com.google.protobuf:protobuf-javalite:3.8.0'

    implementation 'org.checkerframework:checker-compat-qual:2.5.5'
    ext.checkerFrameworkVersion = '3.17.0'

    compileOnly 'org.checkerframework:checker-qual:3.17.0'
    compileOnly 'org.checkerframework:checker:3.17.0'
    implementation project(":sdk")
}

// The dependencies for NDK builds live inside the .aar files so they need to
// be extracted before NDK targets can link against.
task extractNdk(type: Copy)  {
    if (file("${project.rootDir}/sdk/build/outputs/aar/sdk-release.aar").exists()) {
        copy {
            from zipTree("${project.rootDir}/sdk/build/outputs/aar/sdk-release.aar")
            into "libraries/"
            include "jni/**/libcardboard_api.so"
        }
        copy {
            from "${project.rootDir}/sdk/include/cardboard.h"
            into "libraries/"
        }
    }
}

task deleteNdk(type: Delete) {
    delete "libraries/jni"
    delete "libraries/cardboard.h"
}

build.dependsOn(extractNdk)
clean.dependsOn(deleteNdk)
